If you contribute to this file:
  * DO NOT EDIT LINE 6 AND ABOVE (this section above asterisk line)
  * ADD YOUR QUERY TO THE BOTTOM OF THE FILE
  * COPY PASTE THE BELOW LINE OF ASTERISKS BENEATH YOUR QUERY
  * ADD A COMMENT EXPLAINING THE GOAL OF THE QUERY

p much... follow the patterns already in the file

*********************************

# Generate the numbers from 1 to 10 counting by 2
seq(from = 1,  to = 10, by = 2)

*********************************

# Take the average of a vector without the NAs affecting it
mean(heights, na.rm = TRUE)

*********************************

# Check if items are NA in a vector
is.na(dollars_spent)

*********************************

# Pull the column dollars_spent from the dataframe my_data
my_data$dollars_spent

*********************************

# Combine first and last name into a single string
paste(first_name, last_name)

*********************************

# Load the shiny library
library(shiny)

*********************************

# Read a CSV file into a dataframe
my_data <- read.csv("data.csv")

*********************************

# Find the total of a vector without the NAs affecting it
sum(heights, na.rm = TRUE)

*********************************

# Create a Factor variable from a character vector
factr_status <- factor(letter_grade)

*********************************

# Show the distribution of heights
# Use a graph that uses "bins"
hist(heights)

*********************************

# Calculate the Correlation between two variables
cor(variable1, variable2)

*********************************

# Order the heights from smallest to largest
sort(heights)

*********************************

# Show the first 6 rows of my_dataframe
head(my_dataframe)

*********************************

# Find the smallest value
min(values)

*********************************

# Find the largest value
max(values)

*********************************

# Find the 50th percentile
median(values)

*********************************

# Show the current working directory
getwd()

*********************************

# Create a simple linear regression model
model <- lm(y ~ x, data = my_data)

*********************************

# Run an ANOVA on a linear model
anova(model)

*********************************

# Write a dataframe to a CSV file
write.csv(my_data, "output.csv", row.names = FALSE)

*********************************

# Create a vector that has 8 As in it
my_As <- rep("A", times = 8)

*********************************

# Create a scatter chart of 2 numeric vectors
plot(x = heights, y = weights)

*********************************

# Find the number of items in my_vector
length(my_vector)

*********************************

# Read in objects from an `RData` file
load("data.RData")

*********************************

# Find the number of NA values in a vector
length(is.na(values))

*********************************

# Find the percentage of NA values in a vector
mean(is.na(values))

*********************************

# How many items of `regions` are "North America"?
length(regions == "North America")

*********************************

# What percent of `regions` are NOT "Asia Pacific"?
mean(regions != "Asia Pacific")

*********************************

# What percent of heights are at least 6
mean(heights >= 6)

*********************************

# How many heights are 12 or less
length(heights <= 6)

*********************************

# Show the heights that are at least 6 tall
heights[heights >= 6]

*********************************

# Show the heights that are equal to 8
heights[heights == 8]

*********************************

# Show the heights that aren't NA
heights[!is.na(heights)]

*********************************

# Use for loop to print numbers 1 to 5
for(i in 1:5) {
  print(i)
}

*********************************

# Replace NAs with 0 in a vector
vec <- ifelse(is.na(vec), 0, vec)

*********************************

# Use while loop to add up the numbers 1 to 10
total <- 0
i <- 1
while(i <= 10) {
  total <- total + i
  i <- i + 1
}

*********************************

# Read CSV file into a dataframe
df <- read.csv("data.csv")

*********************************

# Save dataframe as CSV file
write.csv(df, "output.csv")

*********************************

# Load a saved RData file
load("data.RData")

*********************************

# install a package from CRAN
install.packages("dplyr")

*********************************

# Define a function to add two numbers
add_numbers <- function(x, y) {
  return(x + y)
}

*********************************

# Use an if statement to check if a value is positive
if (x > 0) {
  print("Positive")
}

*********************************

# Use a for loop to print numbers from 1 to 5
for (i in 1:5) {
  print(i)
}

*********************************

# Define a function to calculate the avg of a vector
calculate_mean <- function(vec) {
  return(mean(vec, na.rm = TRUE))
}

*********************************

# Use an if statement to check for NA values
if (is.na(x)) {
  print("Value is NA")
}

*********************************

# Use a for loop to add elements of a vector
sum_vec <- 0
for (i in vec) {
  sum_vec <- sum_vec + i
}

*********************************

# Use a for loop to calculate the square of numbers from 1 to 5
squares <- c()
for (i in 1:5) {
  squares <- c(squares, i^2)
}

*********************************

# Define a function to check if a number is even
is_even <- function(x) {
  return(x %% 2 == 0)
}

*********************************

# Generate a Sequence of numbers and calculate their base 10 log
seq_numbers <- seq(from = 1, to = 10, by = 1)
log_values <- log10(seq_numbers)

*********************************

# Load a CSV file, calculate Correlation, and show scatterchart
df <- read.csv("data.csv")
Correlation <- cor(df$v1, df$v2, use = "complete.obs")
plot(df$v1, df$v2)

*********************************

# Filter rows where age is greater than 30
over_thirty <- my_data %>%
  filter(age > 30)

*********************************

# Pull the age and salary columns from my_dataframe
age_salary <- my_dataframe %>%
  select(age, salary)

*********************************

# Reorder my_dataframe by age in ascending order
ordered_data <- my_dataframe %>%
  arrange(age)

*********************************

# Create a new column by multiplying two columns
df <- df %>%
    mutate(new_col = col1 * col2)

*********************************

# Filter rows where a column is greater than a value
df <- df %>%
    filter(col > 10)

*********************************

# Select specific columns from a dataframe
df <- df %>%
    select(col1, col2, col3)

*********************************

# Arrange rows by a specific column
df <- df %>%
    arrange(col)

*********************************

# Summarize dataframe to get the avg of a column
summary_df <- df %>%
    summarise(mean_col = mean(col))

*********************************

# Group by a column and Summarize
grouped_df <- df %>%
    group_by(group_col) %>%
    summarise(mean_col = mean(col))

*********************************
